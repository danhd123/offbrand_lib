#!/bin/bash

PUBLIC_TEMPLATE=scripts/templates/PublicHeader.h
PRIVATE_TEMPLATE=scripts/templates/PrivateHeader.h
SOURCE_TEMPLATE=scripts/templates/Source.c
TEST_TEMPLATE=scripts/templates/Test.c
DOX_MODULE=scripts/templates/DocModule.dox

function print_usage() {
  echo "Usage: $(basename $0) [options]"
  echo
  echo "Script generates new files for a Offbrand compatible class with the"
  echo "specified name. All code required for reference counting and inclusion"
  echo "in OffBrand container structures is in place, providing the common"
  echo "starting platform for creating all Offbrand classes"
  echo
  echo "Required Options:"
  echo "-----------------"
  echo "-c <class name>"
  echo "   Name of the newly created class. Should not contain any file"
  echo "   extensions or special characters (such as *,.!? etc.)"
  echo
  echo "Optional Options:"
  echo "-----------------"
  echo "-a <author name>"
  echo "   Author name for the newly created class. Must be in quotes if the"
  echo "   author's name contains any spaces. Default value is \"anonymous\""
  echo "-h"
  echo "   Print usage and exit"
  echo
}

codeClassName=
docFlag=
authorName="anonymous"

while getopts a:c:dh option
do
  case $option in
  a)  authorName="$OPTARG" ;;
  c)  codeClassName="$OPTARG" ;;
  h)  print_usage
      exit 0;;
  ?)  print_usage
      exit 1;;
  esac
done


#check usage
if [[ -z $codeClassName ]]
then
  echo "Class name was not specified"
  print_usage
  exit 1
fi

#Generate substitution strings
macroClassName=$(echo $codeClassName | tr '[a-z]' '[A-Z]') #capitalize class name

#input templates
moduleTemplate=$DOX_MODULE
publicTemplate=$PUBLIC_TEMPLATE
privateTemplate=$PRIVATE_TEMPLATE
sourceTemplate=$SOURCE_TEMPLATE
testTemplate=$TEST_TEMPLATE

#output filenames
docModule=$codeClassName"Module.dox"
publicHeader=$codeClassName".h"
privateHeader=$codeClassName"_Private.h"
sourceFile=$codeClassName".c"
testFile=$codeClassName"_test.c"

echo

#substitute class name into template files and write files with proper file
#names to the current directory
cat $moduleTemplate | sed "s/%CODECLASSNAME%/$codeClassName/g" | \
  sed "s/%CLASSAUTHOR%/$authorName/g" | \
  sed "s/%MACROCLASSNAME%/$macroClassName/g" > $docModule
echo "Add class description to newly created Doxygen Module: $docModule"

cat $publicTemplate | sed "s/%CODECLASSNAME%/$codeClassName/g" | \
  sed "s/%CLASSAUTHOR%/$authorName/g" | \
  sed "s/%MACROCLASSNAME%/$macroClassName/g" > $publicHeader
echo "Add public class method declarations to newly created file: $publicHeader"

cat $privateTemplate | sed "s/%CODECLASSNAME%/$codeClassName/g" | \
  sed "s/%CLASSAUTHOR%/$authorName/g" | \
  sed "s/%MACROCLASSNAME%/$macroClassName/g" > $privateHeader
echo "Add private class method declarations and members to newly created file: "
echo "  $privateHeader"

cat $sourceTemplate | sed "s/%CODECLASSNAME%/$codeClassName/g" | \
  sed "s/%CLASSAUTHOR%/$authorName/g" | \
  sed "s/%MACROCLASSNAME%/$macroClassName/g" > $sourceFile
echo "Add method implementation to newly created file: $sourceFile"

cat $testTemplate | sed "s/%CODECLASSNAME%/$codeClassName/g" | \
  sed "s/%CLASSAUTHOR%/$authorName/g" | \
  sed "s/%MACROCLASSNAME%/$macroClassName/g" > $testFile
echo "Add unit tests to newly created file: $testFile"

echo ""
echo "$codeClassName offbrand compatible class created."
echo
