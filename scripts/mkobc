#!/bin/bash

PUBLIC_TEMPLATE=scripts/templates/PublicHeader.h
PRIVATE_TEMPLATE=scripts/templates/PrivateHeader.h
SOURCE_TEMPLATE=scripts/templates/Source.c
TEST_TEMPLATE=scripts/templates/Test.c
DOX_MODULE=scripts/templates/DocModule.dox

function printUsage() {
  echo "Usage: $(basename $0) [options]"
  echo
  echo "Script generates new files for a Offbrand compatible class with the"
  echo "specified name. All code required for reference counting and inclusion"
  echo "in OffBrand container structures is in place, providing the common"
  echo "starting platform for creating all Offbrand classes"
  echo
  echo "Required Options:"
  echo "-----------------"
  echo "-c <class name>"
  echo "   Name of the newly created class. Should not contain any file"
  echo "   extensions or special characters (such as *,.!? etc.)"
  echo
  echo "Optional Options:"
  echo "-----------------"
  echo "-a <author name>"
  echo "   Author name for the newly created class. Must be in quotes if the"
  echo "   author's name contains any spaces. Default value is \"anonymous\""
  echo "-h"
  echo "   Print usage and exit"
  echo "-m <method classname>"
  echo "   Classname to use for methods of the class. This is useful for"
  echo "   classnames with unnecessary prefixes in method names (such as"
  echo "   OBVector, whose method classname would simply be Vector)"
  echo
}

classname=
author_name="anonymous"
method_classname=

while getopts a:c:hm: option
do
  case $option in
  a)  author_name="$OPTARG" ;;
  c)  classname="$OPTARG" ;;
  h)  printUsage
      exit 0;;
  m)  method_classname="$OPTARG" ;;
  ?)  printUsage
      exit 1;;
  esac
done


#check usage
if [[ -z $classname ]]
then
  echo "Class name was not specified"
  printUsage
  exit 1
fi

if [[ -z $method_classname ]]
then
  method_classname=$classname
fi

#Generate substitution strings
file_name=$(echo $classname | tr '[a-z]' '[A-Z]') #capitalize class name

#input templates
module_template=$DOX_MODULE
public_template=$PUBLIC_TEMPLATE
private_template=$PRIVATE_TEMPLATE
source_template=$SOURCE_TEMPLATE
test_template=$TEST_TEMPLATE

#output filenames
doc_module=$classname"Module.dox"
public_header=$classname".h"
private_header=$classname"_Private.h"
source_file=$classname".c"
test_file=$classname"_test.c"

echo

#substitute class name into template files and write files with proper file
#names to the current directory
cat $module_template | sed "s/%CLASSNAME%/$classname/g" | \
  sed "s/%CLASSAUTHOR%/$author_name/g" | \
  sed "s/%FILENAME%/$file_name/g" | \
  sed "s/%METHODCLASSNAME%/$method_classnamename/g" > $doc_module
echo "Add class description to newly created Doxygen Module: $doc_module"

cat $public_template | sed "s/%CLASSNAME%/$classname/g" | \
  sed "s/%CLASSAUTHOR%/$author_name/g" | \
  sed "s/%FILENAME%/$file_name/g" | \
  sed "s/%METHODCLASSNAME%/$method_classname/g" > $public_header
echo "Add public class method declarations to newly created file: $public_header"

cat $private_template | sed "s/%CLASSNAME%/$classname/g" | \
  sed "s/%CLASSAUTHOR%/$author_name/g" | \
  sed "s/%FILENAME%/$file_name/g" | \
  sed "s/%METHODCLASSNAME%/$method_classname/g" > $private_header
echo "Add private class method declarations and members to newly created file: "
echo "  $private_header"

cat $source_template | sed "s/%CLASSNAME%/$classname/g" | \
  sed "s/%CLASSAUTHOR%/$author_name/g" | \
  sed "s/%FILENAME%/$file_name/g" | \
  sed "s/%METHODCLASSNAME%/$method_classname/g" > $source_file
echo "Add method implementation to newly created file: $source_file"

cat $test_template | sed "s/%CLASSNAME%/$classname/g" | \
  sed "s/%CLASSAUTHOR%/$author_name/g" | \
  sed "s/%FILENAME%/$file_name/g" | \
  sed "s/%METHODCLASSNAME%/$method_classname/g" > $test_file
echo "Add unit tests to newly created file: $test_file"

echo ""
echo "$classname offbrand compatible class created."
echo
